//Count paths that sums up to a given value in binary tree (Array to complete BTree)
#include <bits/stdc++.h>

using namespace std;
int currsum=0;
unordered_map<int,int>prefix;
struct TreeNode {
      int val;
      TreeNode *left;
      TreeNode *right;
      TreeNode() : val(0), left(nullptr), right(nullptr) {}
      TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
      TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};
TreeNode* make_tree(int arr[],TreeNode* root,int i,int n)
{
    if (i < n) 
    { 
        TreeNode* temp = new TreeNode(arr[i]); 
        root = temp; 
  
        // insert left child 
        root->left = make_tree(arr,root->left, 2 * i + 1, n); 
  
        // insert right child 
        root->right = make_tree(arr,root->right, 2 * i + 2, n); 
    } 
    return root;
}

    void helper(TreeNode* root, int sum,int& count)
    {
    if(root==NULL)
        return;
        
    currsum+=root->val;
    if(currsum==sum)
        count++;
    if(prefix.find(currsum-sum)!=prefix.end())
        count+=prefix[currsum-sum];
        
    prefix[currsum]++;
        
    helper(root->left,sum,count);
    helper(root->right,sum,count);
        
    prefix[currsum]--;
    currsum-=root->val;
        
    }
int main()
{
    int n,sum;
    cin>>n>>sum;
    int arr[n];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
   TreeNode* root=make_tree(arr,root,0,n);
   int count=0;
   helper(root,sum,count);
    cout<<count; 
   return 0;
}