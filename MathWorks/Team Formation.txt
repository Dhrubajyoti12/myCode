// Team Formation // MathWorks
#include <bits/stdc++.h>

using namespace std;

long fun(vector<int>& score,int n,int req,int m)
{
    priority_queue<pair<int,int>> pq1,pq2;
    for(int i=0;i<m;i++)
    pq1.push(make_pair(score[i],i));
    for(int j=n-m;j<n;j++)
    pq2.push(make_pair(score[j],j));
    int low=m-1,high=n-m;
    long sum=0;
   
    while(low<high && req)
    {
        pair<int,int> p1=pq1.top();
        pair<int,int> p2=pq2.top();
      
        if((p2.first)>(p1.first))
        {
            sum+=(p2.first);
           // cout<<p2.first<<" ";
            pq2.pop();
            high--;
            if(high!=low)
            pq2.push(make_pair(score[high],high));
        }
        else
        {
            sum+=(p1.first);
           // cout<<p1.first<<" ";
            pq1.pop();
            low++;
            if(high!=low)
            pq1.push(make_pair(score[low],low));
        }
        req--;
        cout<<"def"<<" ";
    }
    while(req)
    {
        pair<int,int> p1=pq1.top();
        pair<int,int> p2=pq2.top();
        if(p2.first>p1.first)
        {
            sum+=(p2.first);
           // cout<<p2.first<<" ";
            pq2.pop();
        }
        else
        {
            sum+=(p1.first);
          //  cout<<p1.first<<" ";
            if(p1.second==p2.second)
            {
                pq1.pop();
                pq2.pop();
            }
            else
            pq1.pop();
        }
        req--;
    }
    cout<<"\n";
    return sum;
}
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n,r,m;
        cin>>n>>r>>m;
         vector<int> score(n);
         for(int i=0;i<n;i++)
             cin>>score[i];
        cout<<fun(score,n,r,m)<<"\n";
    }
   return 0;
}