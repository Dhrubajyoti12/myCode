//Maximize-Difference //Walmart
//Maximize the difference between the no. of greater elements before itself and no. of 
smaller elements after itself in an array
#include <bits/stdc++.h>

using namespace std;
void updateBIT(int BITree[],int n,int ind,int val)
{
    while(ind<=n)
    {
        BITree[ind]+=val;
        ind+= ind & (-ind);
    }
}
int getsum(int BITree[],int ind)
{
    int sum=0;
    while(ind>0)
    {
        sum+=BITree[ind];
        ind-= ind & (-ind);
    }
    return sum;
}
void convert(int arr[],int n)
{
    int temp[n];
    for(int i=0;i<n;i++)
    temp[i]=arr[i];
    sort(temp,temp+n);
    for(int i=0;i<n;i++)
    {
        arr[i]=lower_bound(temp,temp+n,arr[i])-temp+1;
    }
}
int main()
{
   int n;
   cin>>n;
   int arr[n];
   for(int i=0;i<n;i++)
   cin>>arr[i];
   convert(arr,n);
   for(int i=0;i<n;i++)
   cout<<arr[i]<<" ";
   cout<<"\n";
   int BITree[n+1];
   for(int i=1;i<=n;i++)
   BITree[i]=0;
   int smaller[n],greater[n];
   for(int i=n-1;i>=0;i--)
   {
       smaller[i]=getsum(BITree,arr[i]-1);
       updateBIT(BITree,n,arr[i],1);
   }
   for(int i=1;i<=n;i++)
   BITree[i]=0;
   for(int j=0;j<n;j++)
   {
       greater[j]=j-getsum(BITree,arr[j]);
       updateBIT(BITree,n,arr[j],1);
   }
   int res=INT_MIN;
   for(int i=0;i<n;i++)
   {
       res=max(res,abs(greater[i]-smaller[i]));
   }
   cout<<res;
   return 0;
}